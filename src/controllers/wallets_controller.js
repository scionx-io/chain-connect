import { Controller } from "@hotwired/stimulus";
import { createStore } from 'mipd';
import { render } from 'uhtml';
import { WalletManager } from '../core/wallet_manager.js';
import { modalTemplate } from '../templates/modal_template.js';

// A controller for managing the list of wallets with filtering, sorting, and selection
export default class WalletsController extends Controller {
  static targets = ["modal", "list", "search", "filter"]

  static values = {
    sortBy: { type: String, default: 'name' },
    sortOrder: { type: String, default: 'asc' }, // asc or desc
    searchQuery: String,
    selectedRdns: String,
    connecting: { type: Boolean, default: false }
  }

  connect() {
    // Auto-generate modal if user didn't provide one
    if (!this.hasModalTarget) {
      this.createModalTarget();
    }

    // Initialize services
    this.mipdStore = createStore();
    this.walletManager = new WalletManager(this.mipdStore);

    // Initialize wallet detection and list
    this.initializeWalletList();
  }

  disconnect() {
    // Unsubscribe from MIPD store
    if (this.mipdStoreUnsubscribe) {
      this.mipdStoreUnsubscribe();
    }

    // Remove auto-generated modal
    if (this.autoGeneratedModal) {
      this.modalTarget.remove();
    }
  }

  // ============================================================================
  // Target Creation
  // ============================================================================

  createModalTarget() {
    const container = document.createElement('div');
    container.dataset.walletsTarget = "modal";
    document.body.appendChild(container);
    this.autoGeneratedModal = true;
  }

  // ============================================================================
  // Wallet List Management
  // ============================================================================

  initializeWalletList() {
    // Render modal on first load
    this.renderModal();

    // Dispatch event for apps that want to show wallet info elsewhere
    this.dispatch('walletsDetected', {
      detail: { wallets: this.walletManager.getDetectedWallets() }
    });

    // Re-render and dispatch when new wallets inject
    this.mipdStoreUnsubscribe = this.mipdStore.subscribe(() => {
      // Update modal if it exists and is open
      if (this.modal && this.modal.open) {
        this.renderModal();
      }

      this.dispatch('walletsDetected', {
        detail: { wallets: this.walletManager.getDetectedWallets() }
      });
    });
  }

  // ============================================================================
  // Modal Management
  // ============================================================================

  renderModal() {
    let wallets = this.walletManager.getDetectedWallets();

    // Apply search filter
    if (this.searchQueryValue) {
      wallets = wallets.filter(wallet =>
        wallet.name.toLowerCase().includes(this.searchQueryValue.toLowerCase())
      );
    }

    // Apply sorting
    wallets = this.sortWallets(wallets);

    // Temporarily update the modalTemplate to work with the data-action approach
    // We'll need to update the template to accept proper parameters
    render(this.modalTarget, this.getModalTemplate(wallets));

    // Get the dialog element
    this.modal = this.modalTarget.querySelector('dialog');

    // Close on backdrop click
    if (this.modal) {
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });
    }
  }

  openModal() {
    this.renderModal();
    if (this.modal) {
      this.modal.showModal();
    }
  }

  closeModal() {
    if (this.modal) {
      this.modal.close();
    }
  }

  // ============================================================================
  // Wallet Selection
  // ============================================================================

  async selectWallet(event, rdns) {
    if (!rdns) {
      this.dispatch('error', {
        detail: { message: 'Invalid wallet selection' }
      });
      return;
    }

    // Set connecting state
    this.connectingValue = true;
    this.selectedRdnsValue = rdns;

    this.closeModal();
    this.dispatch('connecting', { detail: { rdns } });

    try {
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Connection timeout')), 30000);
      });

      await Promise.race([this.walletManager.connect(rdns), timeoutPromise]);
    } catch (error) {
      console.error('Wallet connection error:', error);
      this.dispatch('error', {
        detail: {
          message: error.message || 'Connection failed',
          error
        }
      });
    } finally {
      this.connectingValue = false;
      this.selectedRdnsValue = "";
    }
  }

  // ============================================================================
  // Wallet List Filtering and Sorting
  // ============================================================================

  sortWallets(wallets) {
    return wallets.sort((a, b) => {
      let result = 0;

      switch (this.sortByValue) {
        case 'name':
          result = a.name.localeCompare(b.name);
          break;
        case 'family':
          result = a.family.localeCompare(b.family);
          break;
        case 'rdns':
          result = a.rdns.localeCompare(b.rdns);
          break;
        default:
          result = a.name.localeCompare(b.name);
      }

      // Apply sort order (asc or desc)
      return this.sortOrderValue === 'desc' ? -result : result;
    });
  }

  // Action triggered by search input
  updateSearch(event) {
    this.searchQueryValue = event.target.value;
    this.renderModal(); // Re-render with filtered results
  }

  // Action to change sort criteria
  changeSort(event) {
    const sortBy = event.target.value;
    // If the same column is clicked again, toggle the sort direction
    if (this.sortByValue === sortBy) {
      this.sortOrderValue = this.sortOrderValue === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortByValue = sortBy;
      this.sortOrderValue = 'asc'; // Default to ascending for new column
    }
    this.renderModal(); // Re-render with sorted results
  }

  // Action to reset filters
  resetFilters() {
    this.searchQueryValue = "";
    if (this.hasSearchTarget) {
      this.searchTarget.value = "";
    }
    this.renderModal(); // Re-render with all wallets
  }

  // ============================================================================
  // Value Change Callbacks
  // ============================================================================

  connectingValueChanged(isConnecting) {
    // Update loading state on selected wallet button
    if (this.hasModalTarget && this.selectedRdnsValue) {
      const button = this.modalTarget.querySelector(
        `[data-wallet-rdns="${this.selectedRdnsValue}"]`
      );
      if (button) {
        button.classList.toggle('loading', isConnecting);
      }
    }
  }
}